{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: async credentials => {\n    const formData = new FormData();\n    formData.append('username', credentials.username);\n    formData.append('password', credentials.password);\n    const response = await api.post('/users/token', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/users/register', userData);\n    return response.data;\n  }\n};\n\n// Users API\nexport const usersAPI = {\n  getCurrentUser: async () => {\n    const response = await api.get('/users/me');\n    return response.data;\n  },\n  getAllUsers: async () => {\n    const response = await api.get('/users/');\n    return response.data;\n  },\n  getUserById: async id => {\n    const response = await api.get(`/users/${id}`);\n    return response.data;\n  }\n};\n\n// Projects API\nexport const projectsAPI = {\n  getAllProjects: async () => {\n    const response = await api.get('/projects/');\n    return response.data;\n  },\n  getProjectById: async id => {\n    const response = await api.get(`/projects/${id}`);\n    return response.data;\n  },\n  createProject: async projectData => {\n    const response = await api.post('/projects/', projectData);\n    return response.data;\n  },\n  updateProject: async (id, projectData) => {\n    const response = await api.put(`/projects/${id}`, projectData);\n    return response.data;\n  },\n  deleteProject: async id => {\n    await api.delete(`/projects/${id}`);\n  }\n};\n\n// Assignments API\nexport const assignmentsAPI = {\n  getAllAssignments: async () => {\n    const response = await api.get('/assignments/');\n    return response.data;\n  },\n  getAssignmentById: async id => {\n    const response = await api.get(`/assignments/${id}`);\n    return response.data;\n  },\n  createAssignment: async assignmentData => {\n    const response = await api.post('/assignments/', assignmentData);\n    return response.data;\n  },\n  updateAssignment: async (id, assignmentData) => {\n    const response = await api.put(`/assignments/${id}`, assignmentData);\n    return response.data;\n  },\n  deleteAssignment: async id => {\n    await api.delete(`/assignments/${id}`);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","formData","FormData","append","username","password","post","data","register","userData","usersAPI","getCurrentUser","get","getAllUsers","getUserById","id","projectsAPI","getAllProjects","getProjectById","createProject","projectData","updateProject","put","deleteProject","delete","assignmentsAPI","getAllAssignments","getAssignmentById","createAssignment","assignmentData","updateAssignment","deleteAssignment"],"sources":["E:/Assignment/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { \r\n  User, \r\n  Project, \r\n  Assignment, \r\n  LoginCredentials, \r\n  AuthResponse, \r\n  CreateUserRequest, \r\n  CreateProjectRequest, \r\n  CreateAssignmentRequest \r\n} from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle auth errors\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  login: async (credentials: LoginCredentials): Promise<AuthResponse> => {\r\n    const formData = new FormData();\r\n    formData.append('username', credentials.username);\r\n    formData.append('password', credentials.password);\r\n    \r\n    const response = await api.post('/users/token', formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  register: async (userData: CreateUserRequest): Promise<User> => {\r\n    const response = await api.post('/users/register', userData);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Users API\r\nexport const usersAPI = {\r\n  getCurrentUser: async (): Promise<User> => {\r\n    const response = await api.get('/users/me');\r\n    return response.data;\r\n  },\r\n\r\n  getAllUsers: async (): Promise<User[]> => {\r\n    const response = await api.get('/users/');\r\n    return response.data;\r\n  },\r\n\r\n  getUserById: async (id: number): Promise<User> => {\r\n    const response = await api.get(`/users/${id}`);\r\n    return response.data;\r\n  },\r\n};\r\n\r\n// Projects API\r\nexport const projectsAPI = {\r\n  getAllProjects: async (): Promise<Project[]> => {\r\n    const response = await api.get('/projects/');\r\n    return response.data;\r\n  },\r\n\r\n  getProjectById: async (id: number): Promise<Project> => {\r\n    const response = await api.get(`/projects/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createProject: async (projectData: CreateProjectRequest): Promise<Project> => {\r\n    const response = await api.post('/projects/', projectData);\r\n    return response.data;\r\n  },\r\n\r\n  updateProject: async (id: number, projectData: Partial<CreateProjectRequest>): Promise<Project> => {\r\n    const response = await api.put(`/projects/${id}`, projectData);\r\n    return response.data;\r\n  },\r\n\r\n  deleteProject: async (id: number): Promise<void> => {\r\n    await api.delete(`/projects/${id}`);\r\n  },\r\n};\r\n\r\n// Assignments API\r\nexport const assignmentsAPI = {\r\n  getAllAssignments: async (): Promise<Assignment[]> => {\r\n    const response = await api.get('/assignments/');\r\n    return response.data;\r\n  },\r\n\r\n  getAssignmentById: async (id: number): Promise<Assignment> => {\r\n    const response = await api.get(`/assignments/${id}`);\r\n    return response.data;\r\n  },\r\n\r\n  createAssignment: async (assignmentData: CreateAssignmentRequest): Promise<Assignment> => {\r\n    const response = await api.post('/assignments/', assignmentData);\r\n    return response.data;\r\n  },\r\n\r\n  updateAssignment: async (id: number, assignmentData: Partial<CreateAssignmentRequest>): Promise<Assignment> => {\r\n    const response = await api.put(`/assignments/${id}`, assignmentData);\r\n    return response.data;\r\n  },\r\n\r\n  deleteAssignment: async (id: number): Promise<void> => {\r\n    await api.delete(`/assignments/${id}`);\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}